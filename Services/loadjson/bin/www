#!/usr/bin/env node

/**
 * Module dependencies.
 */

/***********************************************************************
 *
 * fallback.
 *
 * REVISION HISTORY:
 *
 *            Name          Date            Description
 *            ----          ----            -----------
 *            Ratheesh     17/06/2016      First Version
 *
 ***********************************************************************/
try {
  var env_config = require('../config/config');
  var error;
  var envArr={
    apiPath:'API_PATH',
    brokerHost:'BROKER_PATH',
    dbConn:'DB_CONN',
    dashPath:'DASH_PATH',
    posPath:'POS_PATH',
    authUrl:'AUTH_PATH'
  };
  var env=Object.keys(envArr);
  for(var j = 0, length2 = env.length; j < length2; j++){
    var con= env[j];
    if(env_config[con]==''){
      console.log(''+envArr[con]+' - not found.');
      error=true;
    }
  }
  if(error){
    console.log('ERROR : app can not run - env_config not found');
    return;
  }
 } catch(e) {
    console.log('ERROR : app can not run - env_config not found');
    return;
}
var app = require('../app');
var debug = require('debug')('loadjson:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
